import copy
import Queue

from Node import Node


# This function has combined various functionality namely finding the maximum difference child, BFS, creating dictionary
def traverse_tree(tree, flag):
    q = Queue.Queue()
    q.put([tree, ''])
    diff = 0
    max_node = {}
    tree_dict = {}
    lower_child_dict = {}
    root_val = tree.val
    bfs_tree = []
    while not q.empty():
        pair = q.get()
        t = pair[0]
        if flag == "Dictionary":
            tree_dict[t.val] = t
        elif flag == "Lower Child" and t.val < root_val:
            lower_child_dict[t.val] = pair
        elif flag == "BFS":
            bfs_tree.append(str(t.val))
        for k in t.children:
            if flag == "Maximum":
                m = abs(t.val - k.val)
                if (m >= diff):
                    diff = m
                    max_node.setdefault(m, []).append([t, k])

                # Used below to avoid putting leaf node in Queue
                if k.children is not None:
                    q.put([k, t])
            else:
                q.put([k, t])
    if flag == "Maximum": return max_node
    if flag == "Dictionary": return tree_dict
    if flag == "Lower Child": return lower_child_dict
    if flag == "BFS": return bfs_tree


# This is a recursive function to create a tree which is the start state for the program.
def create_b_tree(sub_tree,parent):
    mid_element = len(sub_tree) / 2
    new_root = Node(sub_tree.pop(mid_element),parent)
    if len(sub_tree) == 2:
        new_root.add_children(Node(sub_tree[0], new_root))
        new_root.add_children(Node(sub_tree[1], new_root))
    else:
        new_root.add_children(create_b_tree(sub_tree[0:len(sub_tree) / 2],new_root))
        new_root.add_children(create_b_tree(sub_tree[len(sub_tree) / 2: len(sub_tree)],new_root))
    return new_root


def create_initial_tree(initial_list_size):
    initial_list = range(1, (initial_list_size + 1))
    root = Node(initial_list.pop((initial_list_size / 2) - 1))
    step = len(initial_list) / 3
    chunks = [initial_list[x: (x + step)] for x in range(0, len(initial_list), step)]

    # For each child of the root tree create Binary tree
    for i in chunks:
        root.add_children(create_b_tree(i,root))
    return root


def is_visited(v, c):
    return ''.join(traverse_tree(c, "BFS")) in v


def swap_nodes(target_node, main_node, initial_node):

    # Change the parents of the swapping nodes

    p = target_node.parent
    target_node.parent = main_node

    # If the target node is the child of the initial node then in that case the target node becomes parent of initial
    # node.Else just swap the parents

    if initial_node == p:
        initial_node.parent = target_node
    else:
        initial_node.parent = p
        p.children.remove(target_node)
        p.children.append(initial_node)
        p.sort_children()

    # The children of initial node become children of the target node and like wise also if target and
    c = target_node.get_children()
    target_node.children = initial_node.children
    initial_node.children = c

    # If the initial node and target node are parent and child in that case for the child node remove the children
    # as itself

    if target_node in target_node.get_children():
        target_node.get_children().remove(target_node)
        target_node.children.append(initial_node)
        target_node.sort_children()
    # For the main node make the target node as its child and remove the initial node at its child and the sort it
    main_node.children.remove(initial_node)
    main_node.children.append(target_node)
    main_node.sort_children()
    for c in target_node.children:
        c.parent=target_node
    for c in initial_node.children:
        c.parent=initial_node


def generate_minimal_tree(tree):
    optimal_queue = Queue.PriorityQueue()
    visited_tree = []
    score_dict = traverse_tree(tree, "Maximum")
    optimal_queue.put([tree, score_dict], max(score_dict.keys()))
    global_minima = {max(score_dict.keys()): [tree]}
    while True:

        if optimal_queue.empty():
            break
        current_item = optimal_queue.get()
        current_tree = current_item[0]
        score_dict = current_item[1]
        if not is_visited(visited_tree, current_tree):

            # Find the maximum difference edge
            tree_dict = traverse_tree(current_tree, "Dictionary")
            current_score = max(score_dict.keys())
            max_dict = score_dict[current_score]
            visited_tree.append(current_tree)
            # For each maximum edge
            for m in max_dict:
                if m[1].val > m[0].val:
                    for i in reversed(range((m[0].val + 1), m[1].val)):
                        temp_max=1000000
                        temp_tree = copy.deepcopy(current_tree)
                        tree_dict = traverse_tree(temp_tree, "Dictionary")
                        swap_nodes(tree_dict[i], tree_dict[m[0].val], tree_dict[m[1].val])
                        if(set(traverse_tree(temp_tree,"BFS"))== set([11,4,12,16,2,6,9,14,17,21,1,3,5,7,8,10,13,15,19,18,20,22])):
                                print "Found"

                        score_dict = traverse_tree(temp_tree, "Maximum")
                        temp_max = max(score_dict.keys())
                       # print temp_max
                        if temp_max <= current_score:
                            if (temp_max not in global_minima.keys()) or (temp_max in global_minima.keys() and len(global_minima[temp_max]) < 100):
                                optimal_queue.put([temp_tree, score_dict], max(score_dict.keys()))
                                global_minima.setdefault(temp_max, []).append(temp_tree)
                                print min(global_minima.keys())
                elif m[1].val < m[0].val:
                    for i in reversed(range((m[1].val + 1), m[0].val)):
                        temp_max=1000000
                        temp_tree = copy.deepcopy(current_tree)
                        tree_dict = traverse_tree(temp_tree, "Dictionary")
                        swap_nodes(tree_dict[i], tree_dict[m[0].val], tree_dict[m[1].val])
                        if(set(traverse_tree(temp_tree,"BFS"))== set([11,4,12,16,2,6,9,14,17,21,1,3,5,7,8,10,13,15,19,18,20,22])):
                                print "Found"

                        score_dict = traverse_tree(temp_tree, "Maximum")
                        temp_max = max(score_dict.keys())
                       # print temp_max
                        if temp_max <= current_score:
                            if (temp_max not in global_minima.keys()) or (temp_max in global_minima.keys() and len(global_minima[temp_max]) < 100):
                                optimal_queue.put([temp_tree, score_dict], max(score_dict.keys()))
                                global_minima.setdefault(temp_max, []).append(temp_tree)
                                print min(global_minima.keys())


def main():
    l = 94
    r = create_initial_tree(l)
    generate_minimal_tree(r)


main()
