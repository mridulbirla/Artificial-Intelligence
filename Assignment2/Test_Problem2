from Node import Node
import Queue


def traverse_tree(tree, flag):

    q=Queue.Queue()
    q.put(tree)
    diff=0
    max_node={}
    tree_dict={}
    lower_child_dict={}
    root_val=tree.val
    bfs_tree=[]
    while not q.empty():
        t = q.get()
        if flag=="Dictionary":
            tree_dict[t.val]=t
        elif flag =="Lower Child" and t.val < root_val:
            lower_child_dict[t.val]=t
        elif flag== "BFS":
             bfs_tree.append(t.val)
        for k in t.children:
            if flag=="Maximum":
                m = abs(t.val-k.val)
                if(m>=diff):
                    diff=m
                    max_node.setdefault(m,[]).append([k,t])

                # Used below to avoid putting leaf node in Queue
                if k.children is not None:
                    q.put(k)
            else:
                q.put(k)
    if flag=="Maximum": return max_node
    if flag=="Dictionary": return tree_dict
    if flag =="Lower Child": return lower_child_dict
    if flag =="BFS": return bfs_tree

def create_b_tree(sub_tree):
    mid_element = len(sub_tree)/2
    new_root = Node(sub_tree.pop(mid_element))
    if len(sub_tree)==2:
        new_root.add_children(Node(sub_tree[0]))
        new_root.add_children(Node(sub_tree[1]))
    else:
        new_root.add_children(create_b_tree(sub_tree[0:len(sub_tree)/2]))
        new_root.add_children(create_b_tree(sub_tree[len(sub_tree)/2: len(sub_tree)]))
    return new_root


def create_initial_tree(initial_list_size):
    initial_list = range(1,(initial_list_size+1))
    root = Node(initial_list.pop((initial_list_size/2) -1))
    step=len(initial_list)/3
    chunks=[initial_list[x: (x+step)] for x in range(0, len(initial_list), step)]
    for i in chunks:
        root.add_children(create_b_tree(i))
    return root


def generate_minimal_tree(tree):
    tree_dict = traverse_tree(tree, "Dictionary")
    score_dict=traverse_tree(tree,"Maximum")
    max_dict=score_dict[max(score_dict.keys())]
    for m in max_dict:
            if m[1] >m[0]:
                c=traverse_tree(m, "Lower Child")
              #  swap(min(c.keys())


def main():
    l = 22
    r = create_initial_tree(l)
    while True:
        print r

main()